#!/usr/bin/env python3

import argparse
import functools
import itertools
import logging
import multiprocessing
import os
import time

from someweta import utils
from someweta import ASPTagger
from someweta.version import __version__

logging.basicConfig(format='%(message)s', level=logging.DEBUG)


def arguments():
    """Process command line arguments."""
    parser = argparse.ArgumentParser(description="An averaged perceptron part-of-speech tagger")
    parser.add_argument("--tag", type=os.path.abspath, required=True, help="Tag the input corpus using the specified model")
    parser.add_argument("--mapping", type=os.path.abspath, help="Additional mapping to coarser tagset; optional and only for tagging, evaluating or cross-validation")
    parser.add_argument("-b", "--beam-size", type=int, default=5, help="Size of the search beam; default: 5")
    parser.add_argument("-x", "--xml", action="store_true", help="The input is an XML file. We assume that each tag is on a separate line. Otherwise the format is the same as for regular files with respect to tag and sentence delimiters.")
    parser.add_argument("-v", "--version", action="version", version="SoMeWeTa %s" % __version__, help="Output version information and exit.")
    parser.add_argument("TEXTS", type=os.path.abspath, nargs="+", help="""Paths to
                                                         input texts (UTF-8-encoded). Format for
                                                         tagging: One token per line; sentences
                                                         delimited by an empty line.""")
    return parser.parse_args()


def tag_xml_file(asptagger, filename):
    outname = filename + ".tagged"
    corpus_size = 0
    with open(filename, encoding="utf-8") as fh:
        with open(outname, mode="w", encoding="utf-8") as out:
            for words, length, lines, word_indexes in utils.iter_xml(fh, tagged=False):
                corpus_size += length
                sentence = asptagger.tag_sentence(words)
                out.write("\n".join(utils.add_pos_to_xml(sentence, lines, word_indexes)))
                out.write("\n\n")
    return corpus_size


def tag_file(asptagger, filename):
    outname = filename + ".tagged"
    corpus_size = 0
    with open(filename, encoding="utf-8") as fh:
        with open(outname, mode="w", encoding="utf-8") as out:
            for words, length in utils.iter_corpus(fh, tagged=False):
                corpus_size += length
                sentence = asptagger.tag_sentence(words)
                out.write("\n".join(["\t".join(t) for t in sentence]))
                out.write("\n\n")
    return corpus_size


def main():
    args = arguments()
    mapping = None
    if args.mapping:
        mapping = utils.read_mapping(args.mapping)
    logging.info("Loading model…")
    asptagger = ASPTagger(beam_size=args.beam_size, mapping=mapping)
    asptagger.load(args.tag)
    logging.info("… done")
    corpus_size = 0
    t0 = time.perf_counter()
    for filename in args.TEXTS:
        if args.xml:
            corpus_size += tag_xml_file(asptagger, filename)
        else:
            corpus_size += tag_file(asptagger, filename)
    t1 = time.perf_counter()
    logging.info("Tagged %d tokens in %s (%d tokens/s)" % (corpus_size, utils.int2str(t1 - t0), corpus_size / (t1 - t0)))


if __name__ == "__main__":
    main()
